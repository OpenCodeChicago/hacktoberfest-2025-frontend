import { X } from 'lucide-react';
import { useEffect, useState } from 'react';
import { getProducts } from '../../api/productService';
import { Link } from 'react-router-dom';
import { getCart, removeFromCart, addToCart } from '../../utils/cart';
import CartItem from './CartItem';
import CartProgressBar from './CartProgressBar';
import CartSuggestions from './CartSuggestions';

export default function CartDrawer({ isOpen, onClose }) {
Â  const [items, setItems] = useState([]);
Â  const [suggestions, setSuggestions] = useState([]);

Â  // Load cart and refresh on storage changes + custom cart update event
Â  useEffect(() => {
Â  Â  let prevCart = null;
Â  Â  const loadCart = () => {
Â  Â  Â  const cart = getCart();
Â  Â  Â  // Only update state if cart content actually changed
Â  Â  Â  if (!prevCart || JSON.stringify(prevCart) !== JSON.stringify(cart)) {
Â  Â  Â  Â  setItems(cart);
Â  Â  Â  Â  prevCart = cart;
Â  Â  Â  }
Â  Â  };

Â  Â  loadCart();
Â  Â  const handleStorageChange = () => loadCart();
Â  Â  const handleCartUpdate = () => loadCart();
Â  Â  const handleEscape = (e) => {
Â  Â  Â  if (e.key === 'Escape' && isOpen) {
Â  Â  Â  Â  onClose();
Â  Â  Â  }
Â  Â  };

Â  Â  window.addEventListener('storage', handleStorageChange);
Â  Â  window.addEventListener('cartUpdated', handleCartUpdate);
Â  Â  window.addEventListener('keydown', handleEscape);

Â  Â  return () => {
Â  Â  Â  window.removeEventListener('storage', handleStorageChange);
Â  Â  Â  window.removeEventListener('cartUpdated', handleCartUpdate);
Â  Â  Â  window.removeEventListener('keydown', handleEscape);
Â  Â  };
Â  }, [isOpen, onClose]);

Â  // Load random products for "You may also like" - ONLY when drawer opens
Â  useEffect(() => {
Â  Â  let active = true;

Â  Â  if (!isOpen) {
Â  Â  Â  // Clear suggestions when drawer is closed to avoid stale items
Â  Â  Â  setSuggestions([]);
Â  Â  Â  return () => {
Â  Â  Â  Â  active = false;
Â  Â  Â  };
Â  Â  }

Â  Â  // Refresh cart items when drawer opens
Â  Â  const cart = getCart();
Â  Â  setItems(cart);

Â  Â  const loadSuggestions = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const response = await getProducts();
Â  Â  Â  Â  if (!active) return;

Â  Â  Â  Â  // Extract products from the nested response structure
Â  Â  Â  Â  const all = response?.data?.products || [];
Â  Â  Â  Â  if (!all || all.length === 0) {
Â  Â  Â  Â  Â  setSuggestions([]);
Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  }

Â  Â  Â  Â  // Filter out products already in cart
Â  Â  Â  Â  const cartProductIds = cart.map((ci) => ci.id);
Â  Â  Â  Â  const filtered = all.filter((p) => {
Â  Â  Â  Â  Â  const prodId = p.id || p._id;
Â  Â  Â  Â  Â  return !cartProductIds.includes(prodId);
Â  Â  Â  Â  });

Â  Â  Â  Â  const shuffled = filtered.sort(() => Math.random() - 0.5);
Â  Â  Â  Â  const selected = shuffled.slice(0, 4);
Â  Â  Â  Â  setSuggestions(selected);
Â  Â  Â  } catch {
Â  Â  Â  Â  if (active) setSuggestions([]);
Â  Â  Â  }
Â  Â  };

Â  Â  loadSuggestions();

Â  Â  return () => {
Â  Â  Â  active = false;
Â  Â  };
Â  }, [isOpen]); // fetch only when drawer opens

Â  const isEmpty = items.length === 0;

Â  // Calculate subtotal with sale prices
Â  const subtotal = items.reduce((sum, item) => {
Â  Â  const basePrice = item.price || 0;
Â  Â  const salePercent = item.salePercentage || 0;
Â  Â  const finalPrice =
Â  Â  Â  salePercent > 0 ? basePrice * (1 - salePercent / 100) : basePrice;
Â  Â  return sum + finalPrice * (item.quantity || 1);
Â  }, 0);

Â  // Calculate milestone progress
Â  const milestones = [
Â  Â  { amount: 75, label: 'Free Shipping' },
Â  Â  { amount: 115, label: 'Free Shaker' },
Â  Â  { amount: 150, label: 'Free T-Shirt' },
Â  ];

Â  const progressPercent = Math.min((subtotal / 150) * 100, 100);
Â  const currentMilestone = milestones.find((m) => subtotal < m.amount);

Â  const handleRemove = (cartItemKey) => {
Â  Â  removeFromCart(cartItemKey);
Â  Â  setTimeout(() => {
Â  Â  Â  const cart = getCart();
Â  Â  Â  setItems(cart);
Â  Â  Â  window.dispatchEvent(new Event('cartUpdated'));
Â  Â  }, 0);
Â  };

Â  const handleQuantityChange = (item, newQty) => {
Â  Â  if (newQty <= 0) {
Â  Â  Â  handleRemove(item.cartItemKey);
Â  Â  Â  return;
Â  Â  }
Â  Â  addToCart(
Â  Â  Â  {
Â  Â  Â  Â  id: item.id,
Â  Â  Â  Â  name: item.name,
Â  Â  Â  Â  price: item.price,
Â  Â  Â  Â  imageUrl: item.imageUrl,
Â  Â  Â  Â  sale: item.salePercentage,
Â  Â  Â  },
Â  Â  Â  item.selectedFlavor,
Â  Â  Â  newQty
Â  Â  );
Â  Â  setTimeout(() => {
Â  Â  Â  const cart = getCart();
Â  Â  Â  setItems(cart);
Â  Â  Â  window.dispatchEvent(new Event('cartUpdated'));
Â  Â  }, 0);
Â  };

Â  // Ensure cart items are always rendered in the order they were added (by addedAt, oldest first)
Â  const orderedItems = items
Â  Â  .slice()
Â  Â  .sort((a, b) => (a.addedAt || 0) - (b.addedAt || 0));

Â  return (
Â  Â  <>
Â  Â  Â  {/* Overlay */}
Â  Â  Â  {isOpen && (
Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  onClick={onClose}
Â  Â  Â  Â  Â  className="fixed inset-0 bg-black/30 backdrop-blur-sm z-[999]"
Â  Â  Â  Â  Â  aria-label="Close cart"
Â  Â  Â  Â  />
Â  Â  Â  )}

Â  Â  Â  {/* Drawer */}
Â  Â  Â  <div
Â  Â  Â  Â  className={`fixed top-0 right-0 h-full w-full sm:w-[40%] bg-white shadow-2xl z-[1000] transform transition-all duration-300 ease-in-out overflow-x-hidden ${
Â  Â  Â  Â  Â  isOpen ? 'translate-x-0' : 'translate-x-full'
Â  Â  Â  Â  } flex flex-col`}
Â  Â  Â  >
Â  Â  Â  Â  {/* Header - Stays put (sticky or fixed) */}
Â  Â  Â  Â  <div className="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex justify-between items-center">
Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-gray-900">Your Cart</h2>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onClose}
Â  Â  Â  Â  Â  Â  className="p-2 hover:bg-gray-100 rounded-full transition"
Â  Â  Â  Â  Â  Â  aria-label="Close cart"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <X className="h-5 w-5 text-gray-700" />
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* Content - SCROLLS HERE */}
Â  Â  Â  Â  {/* ðŸš¨ FIX: Apply 'hide-scrollbar' class to hide the vertical scrollbar track ðŸš¨ */}
Â  Â  Â  Â  <div className="p-6 space-y-6 flex-grow overflow-y-auto hide-scrollbar">
Â  Â  Â  Â  Â  {isEmpty ? (
Â  Â  Â  Â  Â  Â  // Empty State
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  {/* Greyed Progress Bar */}
Â  Â  Â  Â  Â  Â  Â  <CartProgressBar
Â  Â  Â  Â  Â  Â  Â  Â  subtotal={0}
Â  Â  Â  Â  Â  Â  Â  Â  milestones={milestones}
Â  Â  Â  Â  Â  Â  Â  Â  progressPercent={0}
Â  Â  Â  Â  Â  Â  Â  Â  currentMilestone={milestones[0]}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-12">
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-gray-600 text-sm font-medium mb-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Your cart is empty
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  <Link to="/products" className="text-gray-800 underline">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Explore our products.
Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Suggestions for Empty Cart */}
Â  Â  Â  Â  Â  Â  Â  <CartSuggestions suggestions={suggestions} />
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  // Full Cart
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  {/* Progress Bar */}
Â  Â  Â  Â  Â  Â  Â  <CartProgressBar
Â  Â  Â  Â  Â  Â  Â  Â  subtotal={subtotal}
Â  Â  Â  Â  Â  Â  Â  Â  milestones={milestones}
Â  Â  Â  Â  Â  Â  Â  Â  progressPercent={progressPercent}
Â  Â  Â  Â  Â  Â  Â  Â  currentMilestone={currentMilestone}
Â  Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  Â  {/* Cart Items */}
Â  Â  Â  Â  Â  Â  Â  {/* Cart items list */}
Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  // ðŸš¨ FIX: Removed max-h-96 and overflow-y-auto ðŸš¨
Â  Â  Â  Â  Â  Â  Â  Â  className="space-y-4" 
Â  Â  Â  Â  Â  Â  Â  Â  aria-label="Cart items list"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  {orderedItems.map((item) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <CartItem
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={item.cartItemKey}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...item,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  imageUrl:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item.imageUrl ||
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item.image ||
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  item.img ||
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  '/assets/missing-picture-product.jpg',
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onQuantityChange={handleQuantityChange}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onRemove={handleRemove}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClose={onClose}
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Suggestions */}
Â  Â  Â  Â  Â  Â  Â  <CartSuggestions suggestions={suggestions} onClose={onClose} />
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  Â  
Â  Â  Â  Â  {/* Sticky Footer - Stays at the bottom */}
Â  Â  Â  Â  {!isEmpty && (
Â  Â  Â  Â  Â  Â  <div className="sticky bottom-0 bg-white border-t border-gray-200 p-6 space-y-3 -mx-6">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center px-6"> {/* Added px-6 back for inner content */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-lg font-bold text-gray-900">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Subtotal:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-lg font-bold text-blue-600">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ${subtotal.toFixed(2)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="px-6 space-y-3"> {/* Wrapped buttons in a div with padding */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <a
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  href="#"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="block w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg text-center transition"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Proceed to Checkout
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </a>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={onClose}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border border-gray-300 hover:bg-gray-100 text-gray-900 font-semibold py-3 rounded-lg transition"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Continue Shopping
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>
Â  Â  </>
Â  );
}